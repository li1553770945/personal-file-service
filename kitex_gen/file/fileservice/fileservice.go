// Code generated by Kitex v0.7.2. DO NOT EDIT.

package fileservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	file "github.com/li1553770945/personal-file-service/kitex_gen/file"
)

func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

var fileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UploadFile":   kitex.NewMethodInfo(uploadFileHandler, newFileServiceUploadFileArgs, newFileServiceUploadFileResult, false),
		"DownloadFile": kitex.NewMethodInfo(downloadFileHandler, newFileServiceDownloadFileArgs, newFileServiceDownloadFileResult, false),
		"DeleteFile":   kitex.NewMethodInfo(deleteFileHandler, newFileServiceDeleteFileArgs, newFileServiceDeleteFileResult, false),
		"FileInfo":     kitex.NewMethodInfo(fileInfoHandler, newFileServiceFileInfoArgs, newFileServiceFileInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "file",
		"ServiceFilePath": `idl\file.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceUploadFileArgs)
	realResult := result.(*file.FileServiceUploadFileResult)
	success, err := handler.(file.FileService).UploadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceUploadFileArgs() interface{} {
	return file.NewFileServiceUploadFileArgs()
}

func newFileServiceUploadFileResult() interface{} {
	return file.NewFileServiceUploadFileResult()
}

func downloadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceDownloadFileArgs)
	realResult := result.(*file.FileServiceDownloadFileResult)
	success, err := handler.(file.FileService).DownloadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceDownloadFileArgs() interface{} {
	return file.NewFileServiceDownloadFileArgs()
}

func newFileServiceDownloadFileResult() interface{} {
	return file.NewFileServiceDownloadFileResult()
}

func deleteFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceDeleteFileArgs)
	realResult := result.(*file.FileServiceDeleteFileResult)
	success, err := handler.(file.FileService).DeleteFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceDeleteFileArgs() interface{} {
	return file.NewFileServiceDeleteFileArgs()
}

func newFileServiceDeleteFileResult() interface{} {
	return file.NewFileServiceDeleteFileResult()
}

func fileInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceFileInfoArgs)
	realResult := result.(*file.FileServiceFileInfoResult)
	success, err := handler.(file.FileService).FileInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceFileInfoArgs() interface{} {
	return file.NewFileServiceFileInfoArgs()
}

func newFileServiceFileInfoResult() interface{} {
	return file.NewFileServiceFileInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadFile(ctx context.Context, req *file.UploadFileReq) (r *file.UploadFileResp, err error) {
	var _args file.FileServiceUploadFileArgs
	_args.Req = req
	var _result file.FileServiceUploadFileResult
	if err = p.c.Call(ctx, "UploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadFile(ctx context.Context, req *file.DownloadFileReq) (r *file.DownloadFileResp, err error) {
	var _args file.FileServiceDownloadFileArgs
	_args.Req = req
	var _result file.FileServiceDownloadFileResult
	if err = p.c.Call(ctx, "DownloadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFile(ctx context.Context, req *file.DeleteFileReq) (r *file.DeleteFileResp, err error) {
	var _args file.FileServiceDeleteFileArgs
	_args.Req = req
	var _result file.FileServiceDeleteFileResult
	if err = p.c.Call(ctx, "DeleteFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FileInfo(ctx context.Context, req *file.FileInfoReq) (r *file.FileInfoResp, err error) {
	var _args file.FileServiceFileInfoArgs
	_args.Req = req
	var _result file.FileServiceFileInfoResult
	if err = p.c.Call(ctx, "FileInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
